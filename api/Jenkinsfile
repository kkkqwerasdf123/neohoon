pipeline {
    agent any

    environment {
        GIT_URL = 'https://github.com/kkkqwerasdf123/neohoon'

        MODULE = 'api'

        DOCKER_USERNAME = 'kkkqwerasdf123'
        DOCKER_REPOSITORY = 'neohoon'
        DOCKER_TAG_PREFIX = "drumtong-api"
        DOCKER_IMAGE = "$DOCKER_USERNAME/$DOCKER_REPOSITORY"
        DOCKER_IMAGE_CURRENT = "$DOCKER_IMAGE:$DOCKER_TAG_PREFIX-$BUILD_NUMBER"
        DOCKER_IMAGE_LATEST = "$DOCKER_IMAGE:$DOCKER_TAG_PREFIX"
        DOCKER_REPOSITORY_CREDENTIALS_ID = 'hub.docker.kkkqwerasdf123'

        KUBE_NAMESPACE = 'neohoon'
        KUBE_DEPLOY = 'neohoon-drumtong-api'

    }

    tools {
        dockerTool 'docker-24.0.5'
    }

    stages {
        stage('checkout') {
            steps {
                git(url: env.GIT_URL, branch: 'develop', changelog: true)
            }
        }
        stage('gradle build') {
            steps {
                withGradle {
                    sh 'chmod +x gradlew'
                    sh './gradlew clean api:build'
                }
            }
        }
        stage('build docker image') {
            steps {
                dir(env.MODULE) {
                    sh 'docker build . -t $DOCKER_IMAGE'
                    sh 'docker tag $DOCKER_IMAGE $DOCKER_IMAGE_CURRENT'
                    sh 'docker tag $DOCKER_IMAGE $DOCKER_IMAGE_LATEST'
                }
            }
        }
        stage('login docker repository') {
            steps {
                withCredentials([usernamePassword(credentialsId: env.DOCKER_REPOSITORY_CREDENTIALS_ID, usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USER --password-stdin'
                }
            }
        }
        stage('push docker image') {
            steps {
                script {
                    sh 'docker push $DOCKER_IMAGE_LATEST'
                    sh 'docker push $DOCKER_IMAGE_CURRENT'
                }
            }
        }
        stage('cleanup docker local image') {
            steps {
                script {
                    sh 'docker rmi $DOCKER_IMAGE_LATEST'
                    sh 'docker rmi $DOCKER_IMAGE_CURRENT'
                }
            }
        }
        stage('update container image') {
            steps {
                sh 'kubectl set image deployment $KUBE_DEPLOY *=$DOCKER_IMAGE_CURRENT -n $KUBE_NAMESPACE'
            }
        }
    }
}